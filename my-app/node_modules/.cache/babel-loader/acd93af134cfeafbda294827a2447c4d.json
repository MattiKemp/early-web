{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/DisplayPost.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ReactDOM from 'react-dom';\nimport StreamVid from './StreamVid';\nimport Image from './Image'; // Component for displaying the content within a post\n// Properties:\n// content: content to be displayed (post)\n// back: function to be called when the back button is selected\n// select: whether any post is currently selected (boolean)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayPost = ({\n  content,\n  back,\n  select\n}) => {\n  _s();\n\n  // the DOM/React elements of the content\n  const [elements, setElements] = useState([]); // whether the content is loaded (not really used atm)\n\n  const [isLoaded, setIsLoaded] = useState(false); // previous content data (not really used atm)\n\n  const [prevData, setPrevData] = useState({}); // function to load the selected content properly\n  // idk if this is the best way to do this :/\n\n  const loadPost = reset => {\n    if (reset) {\n      // console.log(\"parsing dynamic content\");\n      var newElements = [];\n      var mainDiv = document.getElementsByClassName(\"post-content\")[0]; //var test = document.createElement(\"p\");\n      //test.innerText = \"test\";   \n\n      var lines = content.data.split(\"|\");\n\n      for (var i = 0; i < lines.length; i++) {\n        if (lines[i].charAt(1) === \"p\") {\n          var pElement = document.createElement(\"p\");\n          pElement.innerText = lines[i].substr(3, lines[i].length - 6);\n          newElements.push(pElement);\n        } else if (lines[i].charAt(1) === \"h\") {\n          var pElement = document.createElement(\"h2\");\n          pElement.innerText = lines[i].substr(3, lines[i].length - 6);\n          newElements.push(pElement);\n        } else if (lines[i].charAt(1) === \"v\") {\n          const vidElement = /*#__PURE__*/_jsxDEV(StreamVid, {\n            url: lines[i].substr(3, lines[i].length - 6)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 39\n          }, this);\n\n          newElements.push(vidElement);\n        } else if (lines[i].charAt(1) === \"i\") {\n          const imgElement = /*#__PURE__*/_jsxDEV(Image, {\n            source: 'https://10.0.0.5:8001/media/images/' + lines[i].substr(3, lines[i].length - 6)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 39\n          }, this);\n\n          newElements.push(imgElement);\n        }\n      } // look into react dom rendering and react elements\n      //const body = React.createElement('p', {}, 'Lorem ipsum dolor sit amet');\n      //mainDiv.appendChild(test);\n      //newElements.push(test)\n\n\n      setElements(newElements);\n      setIsLoaded(true);\n      setPrevData(content);\n    } else {\n      var mainDiv = document.getElementsByClassName(\"post-content\")[0];\n      var rContentCount = 0;\n\n      for (var i = 0; i < elements.length; i++) {\n        if (elements[i] instanceof HTMLElement) {\n          mainDiv.appendChild(elements[i]);\n        } else {\n          var divElement = document.createElement(\"div\");\n          divElement.className = \"react-content\";\n          mainDiv.appendChild(divElement);\n          ReactDOM.render(elements[i], document.getElementsByClassName(\"react-content\")[rContentCount]);\n          rContentCount++;\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (select === true) {\n      if (prevData.data != content.data) {\n        // console.log('data changed')\n        loadPost(true);\n      } else {\n        loadPost(false);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: select && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-content\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"green\",\n        text: \"back\",\n        onClick: () => back(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 24\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DisplayPost, \"Owq+hqZuQ8+rCT4RdH+n3oYqzPM=\");\n\n_c = DisplayPost;\nexport default DisplayPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayPost\");","map":{"version":3,"sources":["/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/DisplayPost.js"],"names":["useState","useEffect","PropTypes","Button","ReactDOM","StreamVid","Image","DisplayPost","content","back","select","elements","setElements","isLoaded","setIsLoaded","prevData","setPrevData","loadPost","reset","newElements","mainDiv","document","getElementsByClassName","lines","data","split","i","length","charAt","pElement","createElement","innerText","substr","push","vidElement","imgElement","rContentCount","HTMLElement","appendChild","divElement","className","render"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button from './Button'\r\nimport ReactDOM from 'react-dom';\r\nimport StreamVid from './StreamVid'\r\nimport Image from './Image'\r\n\r\n// Component for displaying the content within a post\r\n// Properties:\r\n// content: content to be displayed (post)\r\n// back: function to be called when the back button is selected\r\n// select: whether any post is currently selected (boolean)\r\nconst DisplayPost = ({ content, back, select }) => {\r\n    // the DOM/React elements of the content\r\n    const [elements, setElements] = useState([])\r\n    // whether the content is loaded (not really used atm)\r\n    const [isLoaded, setIsLoaded] = useState(false)\r\n    // previous content data (not really used atm)\r\n    const [prevData, setPrevData] = useState({})\r\n    // function to load the selected content properly\r\n    // idk if this is the best way to do this :/\r\n    const loadPost = (reset) => {\r\n        if(reset){\r\n            // console.log(\"parsing dynamic content\");\r\n            var newElements = []\r\n            var mainDiv = document.getElementsByClassName(\"post-content\")[0];\r\n            //var test = document.createElement(\"p\");\r\n            //test.innerText = \"test\";   \r\n            var lines = content.data.split(\"|\")\r\n            for(var i = 0; i < lines.length; i++){\r\n                if(lines[i].charAt(1)===\"p\"){\r\n                    var pElement = document.createElement(\"p\");\r\n                    pElement.innerText = lines[i].substr(3,lines[i].length-6);\r\n                    newElements.push(pElement)\r\n                }\r\n                else if(lines[i].charAt(1)===\"h\"){\r\n                    var pElement = document.createElement(\"h2\");\r\n                    pElement.innerText = lines[i].substr(3,lines[i].length-6);\r\n                    newElements.push(pElement)\r\n                }\r\n                else if(lines[i].charAt(1)===\"v\"){\r\n                    const vidElement= <StreamVid url={lines[i].substr(3,lines[i].length-6)} />;\r\n                    newElements.push(vidElement)\r\n                }\r\n                else if(lines[i].charAt(1)===\"i\"){\r\n                    const imgElement= <Image source={'https://10.0.0.5:8001/media/images/' + lines[i].substr(3,lines[i].length-6)} />;\r\n                    newElements.push(imgElement)\r\n                }\r\n            }\r\n\r\n            // look into react dom rendering and react elements\r\n            //const body = React.createElement('p', {}, 'Lorem ipsum dolor sit amet');\r\n            //mainDiv.appendChild(test);\r\n            //newElements.push(test)\r\n            setElements(newElements)\r\n            setIsLoaded(true)\r\n            setPrevData(content)\r\n\r\n        }\r\n        else{\r\n            var mainDiv = document.getElementsByClassName(\"post-content\")[0];\r\n            var rContentCount = 0\r\n            for(var i = 0; i < elements.length; i++){\r\n                if(elements[i] instanceof HTMLElement){\r\n                    mainDiv.appendChild(elements[i])\r\n                }\r\n                else{\r\n                    var divElement = document.createElement(\"div\");\r\n                    divElement.className = \"react-content\"\r\n                    mainDiv.appendChild(divElement)\r\n                    ReactDOM.render(\r\n                        elements[i],\r\n                        document.getElementsByClassName(\"react-content\")[rContentCount]\r\n                      );\r\n                      rContentCount++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if(select === true){\r\n            if(prevData.data != content.data){\r\n                // console.log('data changed')\r\n                loadPost(true)\r\n            }\r\n            else{\r\n                loadPost(false)\r\n            }\r\n        }\r\n      });\r\n\r\n    return (\r\n        <div>\r\n            {select && <div className=\"post-content\">\r\n                <Button color='green' text={\"back\"} onClick={() => back(false)}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DisplayPost\r\n"]},"metadata":{},"sourceType":"module"}