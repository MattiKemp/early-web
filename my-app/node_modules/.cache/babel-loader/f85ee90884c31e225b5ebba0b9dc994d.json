{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Header from './components/Header';\nimport Posts from './components/Posts';\nimport TaskbarButton from './components/TaskbarButton';\nimport SettingsButton from './components/SettingsButton';\nimport { useState, useEffect } from 'react';\nimport AddTask from './components/AddTask';\nimport Login from './components/Login';\nimport MyProfile from './components/MyProfile';\nimport DisplayPost from './components/DisplayPost';\nimport Saved from './components/Saved';\nimport Following from './components/Following';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // credentials for the user\n  // idea: have some kind of verifaction system for every call to the api. Obviously don't include the password\n  // every time lol. Give them some kind of key.\n  const [creds, setCreds] = useState([\"\", \"\"]); // whether addTask should be displayed\n\n  const [showAddTask, setShowAddTask] = useState(false); // the saved home page content\n\n  const [fTasks, setFTasks] = useState([]); // value based on the previous number of home page content, used to give each post a unique local id\n\n  const [fTasksBottom, setFTasksBottom] = useState(0); // the saved explore page content\n\n  const [eTasks, setETasks] = useState([]); // value based on the previous number of explore page content, used to give each post a unique local id\n\n  const [eTasksBottom, setETasksBottom] = useState(0); // the current page displayed\n\n  const [page, setPage] = useState(-1); //const [signedIn, setSignedIn] = useState(false)\n  // whether home page content should be fetched\n\n  const [fetchFollowContent, setfetchFollowContent] = useState(false); // viewing posts\n\n  const [postSelected, setPostSelected] = useState(false); // the content of the post selected by the user\n\n  const [selectedPostContent, setSelectedPostContent] = useState({\n    data: \"\",\n    profile: \"\"\n  }); //profile states for profile, following, saved, premium, and settings content visibility.\n\n  const [profileStates, setProfileStates] = useState([true, false, false, false, false]); // ids of posts the user has saved\n\n  const [savedIds, setSavedIds] = useState(new Set()); // whether the user saved posts ids should be fetched\n\n  const [savedIdsFetched, setSavedIdsFetched] = useState(true); // Add Task, this is to add a new post, but isn't really setup or named properly.\n\n  const addTask = (task, group) => {\n    const id = Math.floor(Math.random() * 10000) + 1;\n    const newTask = {\n      id,\n      ...task\n    };\n\n    if (group === 0) {\n      setFTasks([...fTasks, newTask]);\n    } else if (group === 1) {\n      setETasks([...eTasks, newTask]);\n    }\n  }; // Delete Task, not really used atm\n\n\n  const deleteTask = (id, group) => {\n    if (group === 0) {\n      setFTasks(fTasks.filter(task => task.id !== id));\n    } else if (group === 1) {\n      setETasks(eTasks.filter(task => task.id !== id));\n    }\n  }; // not really used atm\n\n\n  const clearTask = () => {\n    setFTasks([]);\n    setETasks([]);\n  }; // Toggle Reminder, not really used atm. Will probably delete this later\n\n\n  const toggleReminder = (id, group) => {\n    if (group === 0) {\n      setFTasks(fTasks.map(task => task.id === id ? { ...task,\n        reminder: !task.reminder\n      } : task));\n    } else if (group === 1) {\n      setETasks(eTasks.map(task => task.id === id ? { ...task,\n        reminder: !task.reminder\n      } : task));\n    }\n  }; // function to view a selected posts content.\n  // Takes post data of selected post.\n\n\n  const changeSelect = postData => {\n    setSelectedPostContent(postData);\n    setPostSelected(true);\n  }; // function to change the current displayed page. \n  // Takes page ids: Login:-1, Home:0, Explore:1, Groups:2, Me:3\n\n\n  const changePage = pageId => {\n    setPage(pageId);\n  }; // function to validate user credentials with the server when signing in.\n  // see backend comments for more info on specific endpoint details.\n\n\n  const onSignIn = async credentials => {\n    const Data = {\n      user: credentials[0],\n      pass: credentials[1]\n    };\n    const otherParam = {\n      mode: 'cors',\n      credentials: 'same-origin',\n      //headers:{\n      //  \"content-type\":\"application/json; charset=UTF-8\"\n      //},\n      body: JSON.stringify(Data),\n      method: \"POST\"\n    };\n    const response = await fetch(\"https://10.0.0.5:8000/login/\", otherParam);\n    const content = await response.json();\n\n    if (content.valid === \"YES\") {\n      console.log(\"welcome!\");\n      await setCreds([credentials[0], credentials[1]]);\n      await setfetchFollowContent(true);\n      changePage(0);\n      return true;\n    } else {\n      console.log('invalid credentials');\n      return false;\n    }\n  }; // need to put in checks on the backend for invalid inputs, someone could fake a request from outside our website\n  // which would mean they could put whatever they wanted into inputs.\n  // function called when a user makes a signup request, this currently isn't setup on the backend.\n  // *note: this and signIn may be moved into the Login component in the future.\n  // see backend comments for more info on specific endpoint details.\n\n\n  const onSignUp = async credentials => {\n    const Data = {\n      user: credentials[0],\n      pass: credentials[1],\n      first: credentials[2],\n      last: credentials[3],\n      phone: credentials[4]\n    };\n    const otherParam = {\n      mode: 'cors',\n      credentials: 'same-origin',\n      //headers:{\n      //  \"content-type\":\"application/json; charset=UTF-8\"\n      //},\n      body: JSON.stringify(Data),\n      method: \"POST\"\n    };\n    const response = await fetch(\"https://10.0.0.5:8000/signup/\", otherParam);\n    const content = await response.json();\n\n    if (content.valid === \"YES\") {\n      console.log(\"welcome!\");\n      return true;\n    } else {\n      console.log('invalid credentials');\n      return false;\n    }\n  }; // function to get currently saved post ids for the user.\n  // see backend comments for more info on specific endpoint details.\n\n\n  async function fetchSaved() {\n    const Data = {\n      user: creds[0]\n    };\n    const otherParam = {\n      mode: 'cors',\n      credentials: 'same-origin',\n      //headers:{\n      //  \"content-type\":\"application/json; charset=UTF-8\"\n      //},\n      body: JSON.stringify(Data),\n      method: \"POST\"\n    };\n    const response = await fetch(\"https://10.0.0.5:8000/saved/\", otherParam);\n    const content = await response.json();\n    var newSaved = new Set();\n    var newIDs = content.result.split(\",\");\n\n    for (var i = 0; i < newIDs.length; i++) {\n      newSaved.add(parseInt(newIDs[i]));\n    }\n\n    setSavedIds(newSaved);\n  } // function to get explore page content.\n  // see backend comments for more info on specific endpoint details.\n  // later on this will be somewhat tailored to the user, like what instagram does.\n\n\n  async function fetchContentAll(amount) {\n    if (eTasks.length === 0 || amount > 0) {\n      const Data = {\n        depth: amount\n      };\n      const otherParam = {\n        mode: 'cors',\n        credentials: 'same-origin',\n        //headers:{\n        //  \"content-type\":\"application/json; charset=UTF-8\"\n        //},\n        body: JSON.stringify(Data),\n        method: \"POST\"\n      };\n      const response = await fetch(\"https://10.0.0.5:8000/content-all/\", otherParam);\n      const content = await response.json();\n      var newTasks = eTasks;\n\n      for (var i = 0; i < content.length; i++) {\n        await newTasks.push({\n          reminder: false,\n          ...content[i],\n          localId: i + eTasksBottom,\n          group: 1\n        });\n      }\n\n      await setETasks(newTasks);\n      await setETasksBottom(eTasksBottom + content.length);\n    }\n  } // function to get home page content.\n  // see backend comments for more info on specific endpoint details.\n\n\n  async function fetchContentFollowing(amount) {\n    if (fTasks.length === 0 || amount > 0) {\n      const Data = {\n        user: creds[0],\n        depth: amount\n      };\n      const otherParam = {\n        mode: 'cors',\n        credentials: 'same-origin',\n        //headers:{\n        //  \"content-type\":\"application/json; charset=UTF-8\"\n        //},\n        body: JSON.stringify(Data),\n        method: \"POST\"\n      };\n      const response = await fetch(\"https://10.0.0.5:8000/content-following/\", otherParam);\n      const content = await response.json();\n      var newTasks = fTasks;\n\n      if (content !== null) {\n        for (var i = 0; i < content.length; i++) {\n          newTasks.push({\n            reminder: false,\n            ...content[i],\n            localId: i + fTasksBottom,\n            group: 0\n          });\n        }\n\n        await setFTasks(newTasks);\n        setFTasksBottom(fTasksBottom + content.length);\n      }\n    }\n  } // function to change whether a post is saved for this user.\n  // see backend comments for more info on specific endpoint details.\n\n\n  async function setSaved(id) {\n    const Data = {\n      user: creds[0],\n      id: id\n    };\n    const otherParam = {\n      mode: 'cors',\n      credentials: 'same-origin',\n      //headers:{\n      //  \"content-type\":\"application/json; charset=UTF-8\"\n      //},\n      body: JSON.stringify(Data),\n      method: \"POST\"\n    };\n    const response = await fetch(\"https://10.0.0.5:8000/saved-set/\", otherParam);\n    const content = await response.json();\n    var newSaved = new Set();\n    var newIDs = content.result.split(\",\");\n\n    for (var i = 0; i < newIDs.length; i++) {\n      newSaved.add(parseInt(newIDs[i]));\n    }\n\n    setSavedIds(newSaved);\n  } // if page update\n\n\n  useEffect(() => {\n    if (fetchFollowContent) {\n      fetchContentFollowing(10);\n      setfetchFollowContent(false);\n\n      if (savedIdsFetched) {\n        fetchSaved();\n        setSavedIdsFetched(false);\n      }\n    }\n  }); // profile content visibilty\n\n  const changeProfileVars = id => {\n    var newStates = [false, false, false, false, false];\n    newStates[id] = true;\n    setProfileStates(newStates);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [!postSelected && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [page < 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [page === -1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"login\",\n          children: /*#__PURE__*/_jsxDEV(Login, {\n            onSignIn: onSignIn,\n            onSignUp: onSignUp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 25\n        }, this), page === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            title: creds[0],\n            onAdd: () => setShowAddTask(!showAddTask),\n            showAddTask: showAddTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 11\n          }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n            onAdd: addTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 27\n          }, this), fTasks.length > 0 ? /*#__PURE__*/_jsxDEV(Posts, {\n            posts: fTasks,\n            onDelete: deleteTask,\n            onToggle: toggleReminder,\n            onPostSelected: changeSelect,\n            saved: savedIds,\n            onSave: setSaved\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 33\n          }, this) : 'No content to show!']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 24\n        }, this), page === 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"explore\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-control\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"btn btn-block\",\n            type: \"submit\",\n            value: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 11\n          }, this), eTasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n            tasks: eTasks,\n            onDelete: deleteTask,\n            onToggle: toggleReminder,\n            onPostSelected: changeSelect,\n            saved: savedIds,\n            onSave: setSaved\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 33\n          }, this) : 'No Tasks to Show']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 24\n        }, this), page === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"groups\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 22\n      }, this), page === 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-bar\",\n          children: [/*#__PURE__*/_jsxDEV(SettingsButton, {\n            text: \"Profile\",\n            onClick: () => {\n              changeProfileVars(0);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SettingsButton, {\n            text: \"Following\",\n            onClick: () => {\n              changeProfileVars(1);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SettingsButton, {\n            text: \"Saved\",\n            onClick: () => {\n              changeProfileVars(2);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SettingsButton, {\n            text: \"Premium\",\n            onClick: () => {\n              changeProfileVars(3);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SettingsButton, {\n            text: \"Settings\",\n            onClick: () => {\n              changeProfileVars(4);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(MyProfile, {\n            select: profileStates[0],\n            creds: creds\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Following, {\n            select: profileStates[1],\n            username: creds[0],\n            saved: savedIds\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Saved, {\n            select: profileStates[2],\n            creds: creds,\n            onPostSelected: changeSelect,\n            saved: savedIds,\n            onSave: setSaved\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"taskbar\",\n        children: [page > -1 && /*#__PURE__*/_jsxDEV(TaskbarButton, {\n          text: \"Home\",\n          id: 0,\n          onClick: changePage,\n          contentLoad: () => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 25\n        }, this), page > -1 && /*#__PURE__*/_jsxDEV(TaskbarButton, {\n          text: \"Explore\",\n          id: 1,\n          onClick: changePage,\n          contentLoad: fetchContentAll\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 25\n        }, this), page > -1 && /*#__PURE__*/_jsxDEV(TaskbarButton, {\n          text: \"Groups\",\n          id: 2,\n          onClick: changePage,\n          contentLoad: () => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 25\n        }, this), page > -1 && /*#__PURE__*/_jsxDEV(TaskbarButton, {\n          text: \"Me\",\n          id: 3,\n          onClick: changePage,\n          contentLoad: () => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(DisplayPost, {\n        content: selectedPostContent,\n        back: setPostSelected,\n        select: postSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"xWUtFoRJAMP9V8Ub4iVyvL2mhrw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/App.js"],"names":["Header","Posts","TaskbarButton","SettingsButton","useState","useEffect","AddTask","Login","MyProfile","DisplayPost","Saved","Following","App","creds","setCreds","showAddTask","setShowAddTask","fTasks","setFTasks","fTasksBottom","setFTasksBottom","eTasks","setETasks","eTasksBottom","setETasksBottom","page","setPage","fetchFollowContent","setfetchFollowContent","postSelected","setPostSelected","selectedPostContent","setSelectedPostContent","data","profile","profileStates","setProfileStates","savedIds","setSavedIds","Set","savedIdsFetched","setSavedIdsFetched","addTask","task","group","id","Math","floor","random","newTask","deleteTask","filter","clearTask","toggleReminder","map","reminder","changeSelect","postData","changePage","pageId","onSignIn","credentials","Data","user","pass","otherParam","mode","body","JSON","stringify","method","response","fetch","content","json","valid","console","log","onSignUp","first","last","phone","fetchSaved","newSaved","newIDs","result","split","i","length","add","parseInt","fetchContentAll","amount","depth","newTasks","push","localId","fetchContentFollowing","setSaved","changeProfileVars","newStates"],"mappings":"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","sourcesContent":["import Header from './components/Header'\nimport Posts from './components/Posts'\nimport TaskbarButton from './components/TaskbarButton'\nimport SettingsButton from './components/SettingsButton'\nimport { useState, useEffect } from 'react'\nimport AddTask from './components/AddTask'\nimport Login from './components/Login'\nimport MyProfile from './components/MyProfile'\nimport DisplayPost from './components/DisplayPost'\nimport Saved from './components/Saved'\nimport Following from './components/Following'\n\nfunction App() {\n  // credentials for the user\n  // idea: have some kind of verifaction system for every call to the api. Obviously don't include the password\n  // every time lol. Give them some kind of key.\n  const [creds, setCreds] = useState([\"\",\"\"]);\n  // whether addTask should be displayed\n  const [showAddTask, setShowAddTask] = useState(false)\n  // the saved home page content\n  const [fTasks, setFTasks] = useState([])\n  // value based on the previous number of home page content, used to give each post a unique local id\n  const [fTasksBottom, setFTasksBottom] = useState(0)\n  // the saved explore page content\n  const [eTasks, setETasks] = useState([])\n  // value based on the previous number of explore page content, used to give each post a unique local id\n  const [eTasksBottom, setETasksBottom] = useState(0)\n  // the current page displayed\n  const [page, setPage] = useState(-1)\n  //const [signedIn, setSignedIn] = useState(false)\n  // whether home page content should be fetched\n  const [fetchFollowContent, setfetchFollowContent] = useState(false)\n  // viewing posts\n  const [postSelected, setPostSelected] = useState(false)\n  // the content of the post selected by the user\n  const [selectedPostContent, setSelectedPostContent] = useState({data:\"\", profile:\"\"})\n  //profile states for profile, following, saved, premium, and settings content visibility.\n  const [profileStates, setProfileStates] = useState([true, false, false, false, false])\n  // ids of posts the user has saved\n  const [savedIds, setSavedIds] = useState(new Set())\n  // whether the user saved posts ids should be fetched\n  const [savedIdsFetched, setSavedIdsFetched] = useState(true)\n\n  // Add Task, this is to add a new post, but isn't really setup or named properly.\n  const addTask = (task, group) => {\n    const id = Math.floor(Math.random() * 10000) + 1\n    const newTask = { id, ...task }\n    if(group === 0){\n      setFTasks([...fTasks, newTask])\n    }\n    else if(group === 1){\n      setETasks([...eTasks, newTask])\n    }\n  }\n\n  // Delete Task, not really used atm\n  const deleteTask = (id, group) => {\n    if(group === 0){\n      setFTasks(fTasks.filter((task) => task.id !==id))\n    }\n    else if(group === 1){\n      setETasks(eTasks.filter((task) => task.id !==id))\n    }\n  }\n  \n  // not really used atm\n  const clearTask = () => {\n    setFTasks([])\n    setETasks([]);\n  }\n\n  // Toggle Reminder, not really used atm. Will probably delete this later\n  const toggleReminder = (id, group) => {\n    if(group === 0){\n      setFTasks(fTasks.map((task) => \n      task.id === id ? { ...task, reminder: !task.reminder } : task))\n    }\n    else if(group === 1){\n      setETasks(eTasks.map((task) => \n      task.id === id ? { ...task, reminder: !task.reminder } : task))\n    }\n  }\n\n  // function to view a selected posts content.\n  // Takes post data of selected post.\n  const changeSelect = (postData) => {\n    setSelectedPostContent(postData)\n    setPostSelected(true)\n  }\n\n  // function to change the current displayed page. \n  // Takes page ids: Login:-1, Home:0, Explore:1, Groups:2, Me:3\n  const changePage = (pageId) => {\n    setPage(pageId);\n  }\n\n  // function to validate user credentials with the server when signing in.\n  // see backend comments for more info on specific endpoint details.\n  const onSignIn = async (credentials) => {\n    const Data={\n      user: credentials[0],\n      pass: credentials[1]\n    }\n    const otherParam={\n      mode: 'cors',\n      credentials: 'same-origin',\n      //headers:{\n      //  \"content-type\":\"application/json; charset=UTF-8\"\n      //},\n      body: JSON.stringify(Data),\n      method: \"POST\"\n    };\n    const response = await fetch(\"https://10.0.0.5:8000/login/\",otherParam)\n    const content = await response.json();\n    if(content.valid === \"YES\"){\n      console.log(\"welcome!\");\n      await setCreds([credentials[0], credentials[1]]);\n      await setfetchFollowContent(true);\n      changePage(0);\n      return true;\n    }\n    else{\n      console.log('invalid credentials')\n      return false;\n    }\n  }\n\n  // need to put in checks on the backend for invalid inputs, someone could fake a request from outside our website\n  // which would mean they could put whatever they wanted into inputs.\n  // function called when a user makes a signup request, this currently isn't setup on the backend.\n  // *note: this and signIn may be moved into the Login component in the future.\n  // see backend comments for more info on specific endpoint details.\n  const onSignUp = async (credentials) => {\n    const Data={\n      user: credentials[0],\n      pass: credentials[1],\n      first: credentials[2],\n      last: credentials[3],\n      phone: credentials[4]\n    }\n    const otherParam={\n      mode: 'cors',\n      credentials: 'same-origin',\n      //headers:{\n      //  \"content-type\":\"application/json; charset=UTF-8\"\n      //},\n      body: JSON.stringify(Data),\n      method: \"POST\"\n    };\n    const response = await fetch(\"https://10.0.0.5:8000/signup/\",otherParam)\n    const content = await response.json();\n    if(content.valid === \"YES\"){\n      console.log(\"welcome!\");\n      return true;\n    }\n    else{\n      console.log('invalid credentials')\n      return false;\n    }\n  }\n\n  // function to get currently saved post ids for the user.\n  // see backend comments for more info on specific endpoint details.\n  async function fetchSaved(){\n      const Data={\n        user: creds[0]\n      }\n      const otherParam={\n        mode: 'cors',\n        credentials: 'same-origin',\n        //headers:{\n        //  \"content-type\":\"application/json; charset=UTF-8\"\n        //},\n        body: JSON.stringify(Data),\n        method: \"POST\"\n      };\n      const response = await fetch(\"https://10.0.0.5:8000/saved/\",otherParam)\n      const content = await response.json();\n      var newSaved = new Set();\n      var newIDs = content.result.split(\",\")\n      for(var i = 0; i < newIDs.length; i++){\n        newSaved.add(parseInt(newIDs[i]))\n      }\n      setSavedIds(newSaved)\n  }\n\n  // function to get explore page content.\n  // see backend comments for more info on specific endpoint details.\n  // later on this will be somewhat tailored to the user, like what instagram does.\n  async function fetchContentAll(amount){\n    if(eTasks.length === 0 || amount > 0){\n      const Data={\n        depth: amount\n      }\n      const otherParam={\n        mode: 'cors',\n        credentials: 'same-origin',\n        //headers:{\n        //  \"content-type\":\"application/json; charset=UTF-8\"\n        //},\n        body: JSON.stringify(Data),\n        method: \"POST\"\n      };\n      const response = await fetch(\"https://10.0.0.5:8000/content-all/\",otherParam)\n      const content = await response.json();\n      var newTasks = eTasks\n      for(var i = 0; i < content.length; i++){\n        await newTasks.push({reminder:false, ...content[i], localId: i + eTasksBottom, group: 1});\n      }\n      await setETasks(newTasks);\n      await setETasksBottom(eTasksBottom + content.length)\n    }\n  }\n\n  // function to get home page content.\n  // see backend comments for more info on specific endpoint details.\n  async function fetchContentFollowing(amount){\n    if(fTasks.length === 0 || amount > 0){\n      const Data={\n        user: creds[0],\n        depth: amount\n      }\n      const otherParam={\n        mode: 'cors',\n        credentials: 'same-origin',\n        //headers:{\n        //  \"content-type\":\"application/json; charset=UTF-8\"\n        //},\n        body: JSON.stringify(Data),\n        method: \"POST\"\n      };\n      const response = await fetch(\"https://10.0.0.5:8000/content-following/\",otherParam)\n      const content = await response.json();\n      var newTasks = fTasks\n      if(content !== null){\n        for(var i = 0; i < content.length; i++){\n          newTasks.push({reminder:false, ...content[i], localId: i + fTasksBottom, group: 0});\n        }\n        await setFTasks(newTasks);\n        setFTasksBottom(fTasksBottom + content.length)\n      }\n    }\n  }\n\n  // function to change whether a post is saved for this user.\n  // see backend comments for more info on specific endpoint details.\n  async function setSaved(id){\n      const Data={\n        user: creds[0],\n        id: id\n      }\n      const otherParam={\n        mode: 'cors',\n        credentials: 'same-origin',\n        //headers:{\n        //  \"content-type\":\"application/json; charset=UTF-8\"\n        //},\n        body: JSON.stringify(Data),\n        method: \"POST\"\n      };\n      const response = await fetch(\"https://10.0.0.5:8000/saved-set/\",otherParam)\n      const content = await response.json();\n      var newSaved = new Set();\n      var newIDs = content.result.split(\",\")\n      for(var i = 0; i < newIDs.length; i++){\n        newSaved.add(parseInt(newIDs[i]))\n      }\n      setSavedIds(newSaved)\n  }\n\n  // if page update\n  useEffect(() => {\n    if(fetchFollowContent){\n      fetchContentFollowing(10);\n      setfetchFollowContent(false);\n      if(savedIdsFetched){\n        fetchSaved();\n        setSavedIdsFetched(false)\n      }\n    }\n  });\n\n  // profile content visibilty\n  const changeProfileVars = (id) => {\n    var newStates = [false, false, false, false, false]\n    newStates[id] = true\n    setProfileStates(newStates)\n  }\n\n  return (\n    <div className=\"container\">\n      {!postSelected && <div>\n        {page < 3 && <div className=\"main-content\">\n        {page === -1 && <div className=\"login\">\n          <Login onSignIn={onSignIn} onSignUp={onSignUp}/>\n        </div>}\n        {page === 0 && <div className=\"content\">\n          {/* {loginTest && fetchContentFollowing(10) && setLoginTest(false)} */}\n          <Header title={creds[0]} onAdd={() => setShowAddTask(!showAddTask)} showAddTask={showAddTask}/>\n          {showAddTask && <AddTask onAdd={addTask}/>}\n          {(fTasks.length > 0 ? <Posts posts={fTasks} onDelete={deleteTask} onToggle={toggleReminder} onPostSelected={changeSelect} saved={savedIds} onSave={setSaved}/>\n          : 'No content to show!')}\n        </div>}\n        {page === 1 && <div className=\"explore\">\n          {/* make a search component :P, just for looks atm. */}\n          <div className='form-control'>\n            <input type='text' placeholder='Search'/>\n          </div>\n          <input className='btn btn-block' type='submit' value='Search' />\n          {(eTasks.length > 0 ? <Tasks tasks={eTasks} onDelete={deleteTask} onToggle={toggleReminder} onPostSelected={changeSelect} saved={savedIds} onSave={setSaved}/>\n          : 'No Tasks to Show')}\n        </div>}\n        {page === 2 && <div className=\"groups\">\n    \n        </div>}\n        </div>}\n        {page === 3 && <div className=\"user\">\n          <div className=\"settings-bar\">\n            <SettingsButton text={\"Profile\"} onClick={() => {changeProfileVars(0)}}/>\n            <SettingsButton text={\"Following\"} onClick={() => {changeProfileVars(1)}}/>\n            <SettingsButton text={\"Saved\"} onClick={() => {changeProfileVars(2)}}/>\n            <SettingsButton text={\"Premium\"} onClick={() => {changeProfileVars(3)}}/>\n            <SettingsButton text={\"Settings\"} onClick={() => {changeProfileVars(4)}}/>\n          </div>\n          <div>\n            <MyProfile select={profileStates[0]} creds={creds}/>\n            <Following select={profileStates[1]} username={creds[0]} saved={savedIds}/>\n            <Saved select={profileStates[2]} creds={creds} onPostSelected={changeSelect} saved={savedIds} onSave={setSaved}/>\n          </div>\n        </div>}\n        <div className=\"taskbar\">\n          {page > -1 && <TaskbarButton text={\"Home\"} id={0} onClick={changePage} contentLoad={() => {}}/>}\n          {page > -1 && <TaskbarButton text={\"Explore\"} id={1} onClick={changePage} contentLoad={fetchContentAll}/>}\n          {page > -1 && <TaskbarButton text={\"Groups\"} id={2} onClick={changePage} contentLoad={()=>{}}/>}\n          {page > -1 && <TaskbarButton text={\"Me\"} id={3} onClick={changePage} contentLoad={()=>{}}/>}\n        </div>\n      </div>}\n      <div>\n        <DisplayPost content={selectedPostContent} back={setPostSelected} select={postSelected}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}