{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/DisplayPost.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DisplayPost = ({\n  data,\n  back,\n  select\n}) => {\n  _s();\n\n  // const [selected, setSelected] = useState(false)\n  // const [elements, setElements] = useState([])\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [prevData, setPrevData] = useState({}); //const body = React.createElement('p', {}, 'Lorem ipsum dolor sit amet');\n  //idk if this is the best way to do this :/\n\n  const loadPost = () => {\n    // if(elements.length === 0){\n    console.log(\"adding\"); // var newElements = []\n\n    var mainDiv = document.getElementsByClassName(\"post-content\")[0]; //console.log(mainDiv);\n\n    var tempData = data;\n    var test = document.createElement(\"p\");\n    test.innerText = \"test\"; //const body = React.createElement('p', {}, 'Lorem ipsum dolor sit amet');\n\n    mainDiv.appendChild(test); // newElements.push(test)\n    // setElements(newElements)\n    // setSelected(true)\n    // look into react dom rendering and react elements\n\n    setIsLoaded(true);\n    setPrevData(data); // }\n  };\n\n  useEffect(() => {\n    // console.log(\"updated2\");\n    // console.log(prevData)\n    if (select === true) {\n      if (!isLoaded) {\n        console.log(isLoaded);\n        loadPost();\n      } else if (prevData.data != data.data) {\n        // console.log('data changed')\n        loadPost();\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: select && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-content\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        color: \"green\",\n        text: \"back\",\n        onClick: () => back(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 24\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n};\n\n_s(DisplayPost, \"tFWDIt7UdGOrFOhS6zc6qt+Q8JU=\");\n\n_c = DisplayPost;\nexport default DisplayPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayPost\");","map":{"version":3,"sources":["/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/DisplayPost.js"],"names":["useState","useEffect","PropTypes","Button","DisplayPost","data","back","select","isLoaded","setIsLoaded","prevData","setPrevData","loadPost","console","log","mainDiv","document","getElementsByClassName","tempData","test","createElement","innerText","appendChild"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAGA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,KAA4B;AAAA;;AAC5C;AACA;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC,CAJ4C,CAK5C;AACA;;AACA,QAAMY,QAAQ,GAAG,MAAM;AACnB;AACIC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAFe,CAGf;;AACA,QAAIC,OAAO,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,cAAhC,EAAgD,CAAhD,CAAd,CAJe,CAKf;;AACA,QAAIC,QAAQ,GAAGb,IAAf;AAEA,QAAIc,IAAI,GAAGH,QAAQ,CAACI,aAAT,CAAuB,GAAvB,CAAX;AACAD,IAAAA,IAAI,CAACE,SAAL,GAAiB,MAAjB,CATe,CAUf;;AACAN,IAAAA,OAAO,CAACO,WAAR,CAAoBH,IAApB,EAXe,CAYf;AACA;AACA;AACA;;AACAV,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,WAAW,CAACN,IAAD,CAAX,CAjBe,CAkBnB;AAEH,GApBD;;AAsBAJ,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA;AACA,QAAGM,MAAM,KAAK,IAAd,EAAmB;AACf,UAAG,CAACC,QAAJ,EAAa;AACTK,QAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACAI,QAAAA,QAAQ;AACX,OAHD,MAIK,IAAGF,QAAQ,CAACL,IAAT,IAAiBA,IAAI,CAACA,IAAzB,EAA8B;AAC/B;AACAO,QAAAA,QAAQ;AACX;AACJ;AACF,GAbM,CAAT;AAeA,sBACI;AAAA,cACKL,MAAM,iBAAI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACP,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,OAAd;AAAsB,QAAA,IAAI,EAAE,MAA5B;AAAoC,QAAA,OAAO,EAAE,MAAMD,IAAI,CAAC,KAAD;AAAvD;AAAA;AAAA;AAAA;AAAA;AADO;AAAA;AAAA;AAAA;AAAA;AADf;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CAnDD;;GAAMF,W;;KAAAA,W;AAsDN,eAAeA,WAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button from './Button'\r\n\r\n\r\nconst DisplayPost = ({ data, back, select }) => {\r\n    // const [selected, setSelected] = useState(false)\r\n    // const [elements, setElements] = useState([])\r\n    const [isLoaded, setIsLoaded] = useState(false)\r\n    const [prevData, setPrevData] = useState({})\r\n    //const body = React.createElement('p', {}, 'Lorem ipsum dolor sit amet');\r\n    //idk if this is the best way to do this :/\r\n    const loadPost = () => {\r\n        // if(elements.length === 0){\r\n            console.log(\"adding\");\r\n            // var newElements = []\r\n            var mainDiv = document.getElementsByClassName(\"post-content\")[0];\r\n            //console.log(mainDiv);\r\n            var tempData = data;\r\n\r\n            var test = document.createElement(\"p\");\r\n            test.innerText = \"test\";    \r\n            //const body = React.createElement('p', {}, 'Lorem ipsum dolor sit amet');\r\n            mainDiv.appendChild(test);\r\n            // newElements.push(test)\r\n            // setElements(newElements)\r\n            // setSelected(true)\r\n            // look into react dom rendering and react elements\r\n            setIsLoaded(true)\r\n            setPrevData(data)\r\n        // }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(\"updated2\");\r\n        // console.log(prevData)\r\n        if(select === true){\r\n            if(!isLoaded){\r\n                console.log(isLoaded)\r\n                loadPost()\r\n            }\r\n            else if(prevData.data != data.data){\r\n                // console.log('data changed')\r\n                loadPost()\r\n            }\r\n        }\r\n      });\r\n\r\n    return (\r\n        <div>\r\n            {select && <div className=\"post-content\">\r\n                <Button color='green' text={\"back\"} onClick={() => back(false)}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DisplayPost\r\n"]},"metadata":{},"sourceType":"module"}