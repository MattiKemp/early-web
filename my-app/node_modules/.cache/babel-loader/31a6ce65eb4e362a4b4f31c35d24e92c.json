{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Saved.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Post from './Post'; // Component for the Saved post tab in user info\n// Properties:\n// creds: user credentials (array of strings)\n// onPostSelected: function to be called when the user clicks on a post\n// select: the ids of the posts the users has saved\n// onSave: function to be called when the user saves the post\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Saved = ({\n  creds,\n  onPostSelected,\n  select,\n  saved,\n  onSave\n}) => {\n  _s();\n\n  // idk if we should save this info here or in app.js,\n  // if we save it in app.js then we don't have to worry about \n  // making unnecessary calls to the server if the data hasn't changed.\n  // put it in here for now, should be easy to switch over to the other version later.\n  // the posts the user has saved\n  const [savedPosts, setSavedPosts] = useState([]); // a value based on the number of saved posts, used to give each post a unique local id\n\n  const [savedPostsBottom, setSavedPostsBottom] = useState(0); // whether to fetch the saved posts.\n\n  const [fetchSavedContent, setfetchSavedContent] = useState(true); // function to fetch the posts the user has saved\n  // see backend comments for more info on specific endpoint details.\n\n  async function fetchContentSaved(amount) {\n    if (savedPosts.length === 0 || amount > 0) {\n      const Data = {\n        user: creds[0],\n        depth: amount\n      };\n      const otherParam = {\n        mode: 'cors',\n        credentials: 'same-origin',\n        //headers:{\n        //  \"content-type\":\"application/json; charset=UTF-8\"\n        //},\n        body: JSON.stringify(Data),\n        method: \"POST\"\n      };\n      const response = await fetch(\"https://10.0.0.5:8000/content-saved/\", otherParam);\n      const content = await response.json();\n      var newPosts = savedPosts;\n\n      if (content !== null) {\n        for (var i = 0; i < content.length; i++) {\n          newPosts.push({\n            reminder: false,\n            ...content[i],\n            localId: i + savedPostsBottom,\n            group: 0\n          });\n        }\n\n        await setSavedPosts(newPosts);\n        setSavedPostsBottom(savedPostsBottom + content.length);\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (select === true && fetchSavedContent === true) {\n      fetchContentSaved(10);\n      setfetchSavedContent(false);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"saved-content\",\n    children: select && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: savedPosts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        post: post,\n        onPostSelected: onPostSelected,\n        saved: saved,\n        onSave: onSave\n      }, post.localId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 24\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Saved, \"OuPJwlC/rrc0R804QQGEdhq/wpg=\");\n\n_c = Saved;\nexport default Saved;\n\nvar _c;\n\n$RefreshReg$(_c, \"Saved\");","map":{"version":3,"sources":["/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Saved.js"],"names":["useState","useEffect","Post","Saved","creds","onPostSelected","select","saved","onSave","savedPosts","setSavedPosts","savedPostsBottom","setSavedPostsBottom","fetchSavedContent","setfetchSavedContent","fetchContentSaved","amount","length","Data","user","depth","otherParam","mode","credentials","body","JSON","stringify","method","response","fetch","content","json","newPosts","i","push","reminder","localId","group","map","post"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,IAAP,MAAiB,QAAjB,C,CAEA;AACA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAUC,EAAAA,cAAV;AAA0BC,EAAAA,MAA1B;AAAkCC,EAAAA,KAAlC;AAAyCC,EAAAA;AAAzC,CAAD,KAAuD;AAAA;;AACjE;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C,CANiE,CAOjE;;AACA,QAAM,CAACW,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,CAAC,CAAD,CAAxD,CARiE,CASjE;;AACA,QAAM,CAACa,iBAAD,EAAoBC,oBAApB,IAA4Cd,QAAQ,CAAC,IAAD,CAA1D,CAViE,CAYjE;AACA;;AACA,iBAAee,iBAAf,CAAiCC,MAAjC,EAAwC;AACpC,QAAGP,UAAU,CAACQ,MAAX,KAAsB,CAAtB,IAA2BD,MAAM,GAAG,CAAvC,EAAyC;AACvC,YAAME,IAAI,GAAC;AACTC,QAAAA,IAAI,EAAEf,KAAK,CAAC,CAAD,CADF;AAETgB,QAAAA,KAAK,EAAEJ;AAFE,OAAX;AAIA,YAAMK,UAAU,GAAC;AACfC,QAAAA,IAAI,EAAE,MADS;AAEfC,QAAAA,WAAW,EAAE,aAFE;AAGf;AACA;AACA;AACAC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,IAAf,CANS;AAOfS,QAAAA,MAAM,EAAE;AAPO,OAAjB;AASA,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAD,EAAwCR,UAAxC,CAA5B;AACA,YAAMS,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAtB;AACA,UAAIC,QAAQ,GAAGvB,UAAf;;AACA,UAAGqB,OAAO,KAAK,IAAf,EAAoB;AAClB,aAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,OAAO,CAACb,MAA3B,EAAmCgB,CAAC,EAApC,EAAuC;AACrCD,UAAAA,QAAQ,CAACE,IAAT,CAAc;AAACC,YAAAA,QAAQ,EAAC,KAAV;AAAiB,eAAGL,OAAO,CAACG,CAAD,CAA3B;AAAgCG,YAAAA,OAAO,EAAEH,CAAC,GAAGtB,gBAA7C;AAA+D0B,YAAAA,KAAK,EAAE;AAAtE,WAAd;AACD;;AACD,cAAM3B,aAAa,CAACsB,QAAD,CAAnB;AACApB,QAAAA,mBAAmB,CAACD,gBAAgB,GAAGmB,OAAO,CAACb,MAA5B,CAAnB;AACD;AACF;AACF;;AAEHhB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGK,MAAM,KAAK,IAAX,IAAmBO,iBAAiB,KAAK,IAA5C,EAAiD;AAC7CE,MAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAD,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACH;AACJ,GALQ,CAAT;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA,cACKR,MAAM,iBAAI;AAAA,gBACNG,UAAU,CAAC6B,GAAX,CAAgBC,IAAD,iBACZ,QAAC,IAAD;AAAyB,QAAA,IAAI,EAAEA,IAA/B;AAAqC,QAAA,cAAc,EAAElC,cAArD;AAAqE,QAAA,KAAK,EAAEE,KAA5E;AAAmF,QAAA,MAAM,EAAEC;AAA3F,SAAW+B,IAAI,CAACH,OAAhB;AAAA;AAAA;AAAA;AAAA,cADH;AADM;AAAA;AAAA;AAAA;AAAA;AADf;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA1DD;;GAAMjC,K;;KAAAA,K;AA4DN,eAAeA,KAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport Post from './Post'\r\n\r\n// Component for the Saved post tab in user info\r\n// Properties:\r\n// creds: user credentials (array of strings)\r\n// onPostSelected: function to be called when the user clicks on a post\r\n// select: the ids of the posts the users has saved\r\n// onSave: function to be called when the user saves the post\r\nconst Saved = ({ creds , onPostSelected, select, saved, onSave }) => {\r\n    // idk if we should save this info here or in app.js,\r\n    // if we save it in app.js then we don't have to worry about \r\n    // making unnecessary calls to the server if the data hasn't changed.\r\n    // put it in here for now, should be easy to switch over to the other version later.\r\n    // the posts the user has saved\r\n    const [savedPosts, setSavedPosts] = useState([])\r\n    // a value based on the number of saved posts, used to give each post a unique local id\r\n    const [savedPostsBottom, setSavedPostsBottom] = useState(0)\r\n    // whether to fetch the saved posts.\r\n    const [fetchSavedContent, setfetchSavedContent] = useState(true)\r\n\r\n    // function to fetch the posts the user has saved\r\n    // see backend comments for more info on specific endpoint details.\r\n    async function fetchContentSaved(amount){\r\n        if(savedPosts.length === 0 || amount > 0){\r\n          const Data={\r\n            user: creds[0],\r\n            depth: amount\r\n          }\r\n          const otherParam={\r\n            mode: 'cors',\r\n            credentials: 'same-origin',\r\n            //headers:{\r\n            //  \"content-type\":\"application/json; charset=UTF-8\"\r\n            //},\r\n            body: JSON.stringify(Data),\r\n            method: \"POST\"\r\n          };\r\n          const response = await fetch(\"https://10.0.0.5:8000/content-saved/\",otherParam)\r\n          const content = await response.json();\r\n          var newPosts = savedPosts\r\n          if(content !== null){\r\n            for(var i = 0; i < content.length; i++){\r\n              newPosts.push({reminder:false, ...content[i], localId: i + savedPostsBottom, group: 0});\r\n            }\r\n            await setSavedPosts(newPosts);\r\n            setSavedPostsBottom(savedPostsBottom + content.length)\r\n          }\r\n        }\r\n      }\r\n\r\n    useEffect(() => {\r\n        if(select === true && fetchSavedContent === true){\r\n            fetchContentSaved(10)\r\n            setfetchSavedContent(false)\r\n        }\r\n    });\r\n    \r\n    return (\r\n        <div className=\"saved-content\">\r\n            {select && <div>\r\n                {savedPosts.map((post) => (\r\n                    <Post key={post.localId} post={post} onPostSelected={onPostSelected} saved={saved} onSave={onSave}/>\r\n                ))}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Saved\r\n"]},"metadata":{},"sourceType":"module"}