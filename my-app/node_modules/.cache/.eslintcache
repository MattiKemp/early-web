[{"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/index.js":"1","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/App.js":"2","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/reportWebVitals.js":"3","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/AddTask.js":"4","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Header.js":"5","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Button.js":"6","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/StreamVid.js":"7","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/TaskbarButton.js":"8","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Login.js":"9","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/SettingsButton.js":"10","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/MyProfile.js":"11","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Image.js":"12","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/DisplayPost.js":"13","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Saved.js":"14","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Following.js":"15","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Profiles.js":"16","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Profile.js":"17","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Posts.js":"18","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Post.js":"19"},{"size":501,"mtime":1627909517055,"results":"20","hashOfConfig":"21"},{"size":12586,"mtime":1627910631853,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1627025478344,"results":"23","hashOfConfig":"21"},{"size":1034,"mtime":1627894017909,"results":"24","hashOfConfig":"21"},{"size":618,"mtime":1627894572902,"results":"25","hashOfConfig":"21"},{"size":689,"mtime":1627894183214,"results":"26","hashOfConfig":"21"},{"size":818,"mtime":1627909110065,"results":"27","hashOfConfig":"21"},{"size":948,"mtime":1627910136111,"results":"28","hashOfConfig":"21"},{"size":3473,"mtime":1627894700359,"results":"29","hashOfConfig":"21"},{"size":853,"mtime":1627909082505,"results":"30","hashOfConfig":"21"},{"size":3954,"mtime":1627894779500,"results":"31","hashOfConfig":"21"},{"size":676,"mtime":1627894623487,"results":"32","hashOfConfig":"21"},{"size":4005,"mtime":1627894419364,"results":"33","hashOfConfig":"21"},{"size":2772,"mtime":1627910071250,"results":"34","hashOfConfig":"21"},{"size":2697,"mtime":1627894562248,"results":"35","hashOfConfig":"21"},{"size":418,"mtime":1627894870864,"results":"36","hashOfConfig":"21"},{"size":551,"mtime":1627894839309,"results":"37","hashOfConfig":"21"},{"size":713,"mtime":1627909988528,"results":"38","hashOfConfig":"21"},{"size":1140,"mtime":1627911013604,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"169h1gb",{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/index.js",[],"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/App.js",["86","87"],"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/reportWebVitals.js",[],["88","89"],"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/AddTask.js",[],"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Header.js",[],"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Button.js",[],"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/StreamVid.js",["90","91","92"],"import { FaTimes, FaTrashAlt } from 'react-icons/fa'\r\nimport Hls from 'hls.js';\r\nimport ReactHlsPlayer from 'react-hls-player';\r\n\r\n// Component for streaming hls videos\r\n// Properties:\r\n// url: the url of the stream\r\nconst StreamVid = ({ url, onStream }) => {\r\n    const embedVideo = (url) => {\r\n        var video = document.getElementsByClassName('vid');\r\n        var hls = new Hls();\r\n        hls.loadSource(url);\r\n        hls.attachMedia(video);\r\n      }\r\n    embedVideo(url);\r\n    var config = {testBandwidth: false,\r\n        lowLatencyMode:false}\r\n      \r\n    return (\r\n        <div >\r\n            {/* <video className={'vid'}></video> */}\r\n            <ReactHlsPlayer src={url} autoPlay={false} controls={true} width=\"100%\" height=\"auto\" ></ReactHlsPlayer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StreamVid\r\n","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/TaskbarButton.js",[],"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Login.js",["93","94","95"],"import { useState } from 'react'\r\nimport Button from './Button'\r\n\r\n// Component for the login page\r\n// Properties:\r\n// onSignIn: function to call when the user attempts to login\r\n// onSignUp: function to call when the user attempts to signup\r\n// this function may have a lot of work done on in the future so its comments are sparse atm.\r\nconst Login = ({ onSignIn, onSignUp }) => {\r\n    const [user, setUser] = useState('')\r\n    const [pass, setPass] = useState('')\r\n    const [first, setFirst] = useState('')\r\n    const [last, setLast] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n    const [remember, setRemember] = useState(false)\r\n    const [signUp, setSignUp] = useState(false)\r\n    \r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        if(!user){\r\n            alert('Please add a username')\r\n        }\r\n\r\n        if(!pass){\r\n            alert('Please enter a password')\r\n        }\r\n        if(!signUp){\r\n            var result = onSignIn([user, pass, remember])\r\n            //setUser('')\r\n            setPass('')\r\n            //setRemember(false)\r\n        }\r\n        else {\r\n            if(!first){\r\n                alert('Please enter a first name')\r\n            }\r\n            if(!last){\r\n                alert('Please enter a last name')\r\n            }\r\n            var result = onSignUp([user, pass, first, last, phone])\r\n            setPass('')\r\n            setFirst('')\r\n            setLast('')\r\n            setPhone('')\r\n        }\r\n    }\r\n    //this is gross, change this later\r\n    const changeSignUp = () => {\r\n        setSignUp(!signUp);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form className='add-form' onSubmit={onSubmit}>\r\n                <div className='form-control'>\r\n                    <label>Username</label>\r\n                    <input type='text' placeholder='Username' value={user} onChange={(e) => setUser(e.target.value)}/>\r\n                </div>\r\n                <div className='form-control'>\r\n                    <label>Password</label>\r\n                    <input type='text' placeholder='Password' value={pass} onChange={(e) => setPass(e.target.value)}/>\r\n                </div>\r\n                {signUp && <div className='form-control'>\r\n                    <label>First Name</label>\r\n                    <input type='text' placeholder='FirstName' value={first} onChange={(e) => setFirst(e.target.value)}/>\r\n                </div>}\r\n                {signUp && <div className='form-control'>\r\n                    <label>Last Name</label>\r\n                    <input type='text' placeholder='LastName' value={last} onChange={(e) => setLast(e.target.value)}/>\r\n                </div>}\r\n                {signUp && <div className='form-control'>\r\n                    <label>Phone Number (Optional)</label>\r\n                    <input type='text' placeholder='PhoneNumber' value={phone} onChange={(e) => setPhone(e.target.value)}/>\r\n                </div>}\r\n                {!signUp && <div className='form-control-check'>\r\n                    <label>Remember Me</label>\r\n                    <input type='checkbox' checked={remember} value={remember} onChange={(e) => setRemember(e.currentTarget.checked)}/>\r\n\r\n                </div>}\r\n                <input className='btn btn-block' type='submit' value='Login' />\r\n            </form>\r\n            <input className='btn btn-block' type='button' value=\"Sign Up\" onClick={() => changeSignUp()}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/SettingsButton.js",[],"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/MyProfile.js",["96","97"],"import { useState, useEffect } from 'react'\r\n\r\n// Component for the user profile page\r\n// Properties:\r\n// onAdd: ??\r\n// url: ??\r\n// info: ??\r\n// select: whether the page is currently selected (boolean)\r\n// creds: user credentials (array of strings)\r\nconst MyProfile = ({ onAdd, url, info, select, creds}) => {\r\n    const [edit, setEdit] = useState(false)\r\n    const [picture, setPicture] = useState('https://www.thesprucepets.com/thmb/e0qbZ-sQwW9Sftl7M8BEVW71cYQ=/1080x0/filters:no_upscale():max_bytes(150000):strip_icc():format(webp)/31878200_171911650157470_2552192489247211520_n-5ba0559b4cedfd0025a1b9ac.jpg')\r\n    const [first, setFirst] = useState('')\r\n    const [last, setLast] = useState('')\r\n    const [description, setDescription] = useState('')\r\n    const [prevValues, setPrevValues] = useState(['','',''])\r\n    const [fetchProfileContent, setfetchProfileContent] = useState(true)\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault()\r\n        setEdit(!edit)\r\n    }\r\n\r\n    const onEdit = () => {\r\n        setPrevValues([first, last, description])\r\n        setEdit(!edit);\r\n    }\r\n\r\n    const onCancel = () => {\r\n        setFirst(prevValues[0])\r\n        setLast(prevValues[1])\r\n        setDescription(prevValues[2])\r\n        setEdit(!edit)\r\n    }\r\n\r\n    async function fetchContentProfile(){\r\n        if(true){\r\n        //   console.log('fetching my profile content');\r\n          const Data={\r\n            user: creds[0]\r\n          }\r\n          const otherParam={\r\n            mode: 'cors',\r\n            credentials: 'same-origin',\r\n            //headers:{\r\n            //  \"content-type\":\"application/json; charset=UTF-8\"\r\n            //},\r\n            body: JSON.stringify(Data),\r\n            method: \"POST\"\r\n          };\r\n          const response = await fetch(\"https://10.0.0.5:8000/content-profile/\",otherParam)\r\n          const content = await response.json();\r\n          if(content !== null){\r\n            // console.log(content);\r\n            setPicture(\"https://10.0.0.5:8001/media/images/\" + content.picture)\r\n            setFirst(content.first)\r\n            setLast(content.last)\r\n          }\r\n          // setfetchFollowContent(false);\r\n        }\r\n      }\r\n\r\n    useEffect(() => {\r\n        if(select === true && fetchProfileContent === true){\r\n            fetchContentProfile()\r\n            setfetchProfileContent(false)\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"profile-content\">\r\n            {select && <div>\r\n                {edit && <form className='add-form' onSubmit={onSubmit}>\r\n                    <div className='form-control'>\r\n                        <label>First Name</label>\r\n                        <input type='text' placeholder='First' value={first} onChange={(e) => setFirst(e.target.value)}/>\r\n                    </div>\r\n                    <div className='form-control'>\r\n                        <label>Last Name</label>\r\n                        <input type='text' placeholder='Last' value={last} onChange={(e) => setLast(e.target.value)}/>\r\n                    </div>\r\n                    <div className='form-control'>\r\n                        <label>About Me</label>\r\n                        <input type='text' placeholder='About' value={description} onChange={(e) => setDescription(e.target.value)}/>\r\n                    </div>\r\n                    <input className='btn btn-block' type='submit' value='Update' />\r\n                    <input className='btn btn-block' type='button' value='Cancel' onClick={() => onCancel()}/>\r\n                </form>}\r\n                {!edit && <div>\r\n                    <img src={picture} width=\"150px\"></img>\r\n                    <h1>{first}</h1>\r\n                    <h1>{last}</h1>\r\n                    <h2>{description}</h2>\r\n                    <input className='btn btn-block' type='button' value='Edit Profile' onClick={() => onEdit()}/>\r\n                </div>}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyProfile\r\n","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Image.js",["98","99"],"import React, {Suspense} from 'react'\r\nimport {useImage} from 'react-image'\r\n \r\n// component used for displaying React images.\r\n// Properties:\r\n// source: the link to the image (string)\r\n// profileStyle: what style the image should be displayed with (int) \r\nconst Image = ({source, profileStyle}) => {\r\n  const {src} = useImage({\r\n    srcList: source,\r\n  })\r\n  return <img src={src} className={`${profileStyle == 1 ? 'profile-pic-small' : 'thumbnail-pic'}`}/>\r\n}\r\n \r\n\r\nexport default function MyComponent({source, profileStyle}) {\r\n  return (\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <Image source={source} profileStyle={profileStyle}/>\r\n    </Suspense>\r\n  )\r\n}","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/DisplayPost.js",["100","101","102","103","104","105"],"import { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Button from './Button'\r\nimport ReactDOM from 'react-dom';\r\nimport StreamVid from './StreamVid'\r\nimport Image from './Image'\r\n\r\n// Component for displaying the content within a post\r\n// Properties:\r\n// content: content to be displayed (post)\r\n// back: function to be called when the back button is selected\r\n// select: whether any post is currently selected (boolean)\r\nconst DisplayPost = ({ content, back, select }) => {\r\n    // the DOM/React elements of the content\r\n    const [elements, setElements] = useState([])\r\n    // whether the content is loaded (not really used atm)\r\n    const [isLoaded, setIsLoaded] = useState(false)\r\n    // previous content data (not really used atm)\r\n    const [prevData, setPrevData] = useState({})\r\n    // function to load the selected content properly\r\n    // idk if this is the best way to do this :/\r\n    const loadPost = (reset) => {\r\n        if(reset){\r\n            // console.log(\"parsing dynamic content\");\r\n            var newElements = []\r\n            var mainDiv = document.getElementsByClassName(\"post-content\")[0];\r\n            //var test = document.createElement(\"p\");\r\n            //test.innerText = \"test\";   \r\n            var lines = content.data.split(\"|\")\r\n            for(var i = 0; i < lines.length; i++){\r\n                if(lines[i].charAt(1)===\"p\"){\r\n                    var pElement = document.createElement(\"p\");\r\n                    pElement.innerText = lines[i].substr(3,lines[i].length-6);\r\n                    newElements.push(pElement)\r\n                }\r\n                else if(lines[i].charAt(1)===\"h\"){\r\n                    var pElement = document.createElement(\"h2\");\r\n                    pElement.innerText = lines[i].substr(3,lines[i].length-6);\r\n                    newElements.push(pElement)\r\n                }\r\n                else if(lines[i].charAt(1)===\"v\"){\r\n                    const vidElement= <StreamVid url={lines[i].substr(3,lines[i].length-6)} />;\r\n                    newElements.push(vidElement)\r\n                }\r\n                else if(lines[i].charAt(1)===\"i\"){\r\n                    const imgElement= <Image source={'https://10.0.0.5:8001/media/images/' + lines[i].substr(3,lines[i].length-6)} />;\r\n                    newElements.push(imgElement)\r\n                }\r\n            }\r\n\r\n            // look into react dom rendering and react elements\r\n            //const body = React.createElement('p', {}, 'Lorem ipsum dolor sit amet');\r\n            //mainDiv.appendChild(test);\r\n            //newElements.push(test)\r\n            setElements(newElements)\r\n            setIsLoaded(true)\r\n            setPrevData(content)\r\n\r\n        }\r\n        else{\r\n            var mainDiv = document.getElementsByClassName(\"post-content\")[0];\r\n            var rContentCount = 0\r\n            for(var i = 0; i < elements.length; i++){\r\n                if(elements[i] instanceof HTMLElement){\r\n                    mainDiv.appendChild(elements[i])\r\n                }\r\n                else{\r\n                    var divElement = document.createElement(\"div\");\r\n                    divElement.className = \"react-content\"\r\n                    mainDiv.appendChild(divElement)\r\n                    ReactDOM.render(\r\n                        elements[i],\r\n                        document.getElementsByClassName(\"react-content\")[rContentCount]\r\n                      );\r\n                      rContentCount++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if(select === true){\r\n            if(prevData.data != content.data){\r\n                loadPost(true)\r\n            }\r\n            else{\r\n                loadPost(false)\r\n            }\r\n        }\r\n      });\r\n\r\n    return (\r\n        <div>\r\n            {select && <div className=\"post-content\">\r\n                <Button color='green' text={\"back\"} onClick={() => back(false)}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default DisplayPost\r\n","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Saved.js",["106"],"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Following.js",["107"],"import { useState, useEffect } from 'react'\r\nimport Profiles from './Profiles'\r\n\r\n// Component for the following tab in user info\r\n// Properties:\r\n// username: the username of the current user (string)\r\n// select: whether the following tab is currently selected (boolean)\r\nconst Following = ({ username, select }) => {\r\n    // idk if we should save this info here or in app.js,\r\n    // if we save it in app.js then we don't have to worry about \r\n    // making unnecessary calls to the server if the data hasn't changed.\r\n    // put it in here for now, should be easy to switch over to the other version later.\r\n    // the profiles the user is currently following (profile)\r\n    const [followingProfiles, setFollowingProfiles] = useState([])\r\n    // a value based on the previous number of profiles, used to give each profile a unique local id.\r\n    const [followingBottom, setFollowingBottom] = useState(0)\r\n    // whether the followed profiles should be fetched.\r\n    const [fetchProfiles, setfetchProfiles] = useState(true)\r\n\r\n    // function to fetch all the profiles this user is following.\r\n    // see backend comments for more info on specific endpoint details.\r\n    // all of these async functions are getting called twice per load, figure this out later.\r\n    async function fetchFollowingProfiles(amount){\r\n        if(followingProfiles.length === 0 || amount > 0){\r\n          const Data={\r\n            user: username,\r\n            depth: amount\r\n          }\r\n          const otherParam={\r\n            mode: 'cors',\r\n            credentials: 'same-origin',\r\n            //headers:{\r\n            //  \"content-type\":\"application/json; charset=UTF-8\"\r\n            //},\r\n            body: JSON.stringify(Data),\r\n            method: \"POST\"\r\n          };\r\n          const response = await fetch(\"https://10.0.0.5:8000/content-profile-following/\",otherParam)\r\n          const content = await response.json();\r\n          var newProfiles = followingProfiles\r\n          if(content !== null){\r\n            for(var i = 0; i < content.length; i++){\r\n                newProfiles.push({...content[i], localId: i + followingBottom});\r\n            }\r\n            await setFollowingProfiles(newProfiles);\r\n            setFollowingBottom(followingBottom + content.length)\r\n          }\r\n        }\r\n      }\r\n\r\n    useEffect(() => {\r\n        if(select === true && fetchProfiles === true){\r\n            fetchFollowingProfiles(10)\r\n            setfetchProfiles(false)\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"following-content\">\r\n            {select && <div>\r\n                <Profiles profiles={followingProfiles}/>\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Following\r\n","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Profiles.js",[],"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Profile.js",["108"],"import { FaTimes, FaTrashAlt } from 'react-icons/fa'\r\nimport Image from './Image'\r\n\r\n\r\n// Component used for profiles\r\n// Properties:\r\n// profile: user profile info (profile object)\r\nconst Profile = ({ profile }) => {\r\n\r\n    return (\r\n        <div className={`profile-collapsed`}>\r\n            <Image source={'https://10.0.0.5:8001/media/images/' + profile.picture} profileStyle={1}/>\r\n            <h3>{profile.first + ' ' + profile.last} <FaTimes style={{color: 'red', cursor: 'pointer'}} /></h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Posts.js",[],"/mnt/c/Users/Eatme/Desktop/Company/early-web/my-app/src/components/Post.js",["109","110","111","112"],{"ruleId":"113","severity":1,"message":"114","line":67,"column":9,"nodeType":"115","messageId":"116","endLine":67,"endColumn":19},{"ruleId":"117","severity":1,"message":"118","line":272,"column":3,"nodeType":"115","endLine":272,"endColumn":12,"suggestions":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"113","severity":1,"message":"124","line":1,"column":10,"nodeType":"115","messageId":"116","endLine":1,"endColumn":17},{"ruleId":"113","severity":1,"message":"125","line":1,"column":19,"nodeType":"115","messageId":"116","endLine":1,"endColumn":29},{"ruleId":"113","severity":1,"message":"126","line":16,"column":9,"nodeType":"115","messageId":"116","endLine":16,"endColumn":15},{"ruleId":"113","severity":1,"message":"127","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":14},{"ruleId":"128","severity":1,"message":"129","line":41,"column":17,"nodeType":"115","messageId":"130","endLine":41,"endColumn":23},{"ruleId":"113","severity":1,"message":"131","line":41,"column":17,"nodeType":"115","messageId":"116","endLine":41,"endColumn":23},{"ruleId":"117","severity":1,"message":"132","line":63,"column":5,"nodeType":"115","endLine":63,"endColumn":14,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":90,"column":21,"nodeType":"136","endLine":90,"endColumn":54},{"ruleId":"134","severity":1,"message":"135","line":12,"column":10,"nodeType":"136","endLine":12,"endColumn":101},{"ruleId":"137","severity":1,"message":"138","line":12,"column":52,"nodeType":"139","messageId":"140","endLine":12,"endColumn":54},{"ruleId":"113","severity":1,"message":"141","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":17},{"ruleId":"113","severity":1,"message":"142","line":17,"column":12,"nodeType":"115","messageId":"116","endLine":17,"endColumn":20},{"ruleId":"128","severity":1,"message":"143","line":37,"column":25,"nodeType":"115","messageId":"130","endLine":37,"endColumn":33},{"ruleId":"128","severity":1,"message":"144","line":61,"column":17,"nodeType":"115","messageId":"130","endLine":61,"endColumn":24},{"ruleId":"128","severity":1,"message":"145","line":63,"column":21,"nodeType":"115","messageId":"130","endLine":63,"endColumn":22},{"ruleId":"137","severity":1,"message":"146","line":84,"column":30,"nodeType":"139","messageId":"140","endLine":84,"endColumn":32},{"ruleId":"117","severity":1,"message":"147","line":52,"column":5,"nodeType":"115","endLine":52,"endColumn":14,"suggestions":"148"},{"ruleId":"117","severity":1,"message":"149","line":51,"column":5,"nodeType":"115","endLine":51,"endColumn":14,"suggestions":"150"},{"ruleId":"113","severity":1,"message":"125","line":1,"column":19,"nodeType":"115","messageId":"116","endLine":1,"endColumn":29},{"ruleId":"113","severity":1,"message":"125","line":1,"column":19,"nodeType":"115","messageId":"116","endLine":1,"endColumn":29},{"ruleId":"113","severity":1,"message":"151","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":17},{"ruleId":"113","severity":1,"message":"152","line":5,"column":8,"nodeType":"115","messageId":"116","endLine":5,"endColumn":16},{"ruleId":"113","severity":1,"message":"153","line":6,"column":10,"nodeType":"115","messageId":"116","endLine":6,"endColumn":18},"no-unused-vars","'clearPosts' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setfetchFollowContent'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [fetchFollowContent, fetchContentFollowing, savedIdsFetched, fetchSaved] as a second argument to the useEffect Hook.",["154"],"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"'FaTimes' is defined but never used.","'FaTrashAlt' is defined but never used.","'config' is assigned a value but never used.","'Button' is defined but never used.","no-redeclare","'result' is already defined.","redeclared","'result' is assigned a value but never used.","React Hook useEffect contains a call to 'setfetchProfileContent'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [select, fetchProfileContent, fetchContentProfile] as a second argument to the useEffect Hook.",["157"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'PropTypes' is defined but never used.","'isLoaded' is assigned a value but never used.","'pElement' is already defined.","'mainDiv' is already defined.","'i' is already defined.","Expected '!==' and instead saw '!='.","React Hook useEffect contains a call to 'setfetchSavedContent'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [select, fetchSavedContent, fetchContentSaved] as a second argument to the useEffect Hook.",["158"],"React Hook useEffect contains a call to 'setfetchProfiles'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [select, fetchProfiles, fetchFollowingProfiles] as a second argument to the useEffect Hook.",["159"],"'StreamVid' is defined but never used.","'ReactDOM' is defined but never used.","'useState' is defined but never used.",{"desc":"160","fix":"161"},"no-global-assign","no-unsafe-negation",{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},"Add dependencies array: [fetchFollowContent, fetchContentFollowing, savedIdsFetched, fetchSaved]",{"range":"168","text":"169"},"Add dependencies array: [select, fetchProfileContent, fetchContentProfile]",{"range":"170","text":"171"},"Add dependencies array: [select, fetchSavedContent, fetchContentSaved]",{"range":"172","text":"173"},"Add dependencies array: [select, fetchProfiles, fetchFollowingProfiles]",{"range":"174","text":"175"},[9506,9506],", [fetchFollowContent, fetchContentFollowing, savedIdsFetched, fetchSaved]",[2366,2366],", [select, fetchProfileContent, fetchContentProfile]",[2418,2418],", [select, fetchSavedContent, fetchContentSaved]",[2469,2469],", [select, fetchProfiles, fetchFollowingProfiles]"]